/*! southteams-ski 24-05-2019 */

const GAME_WIDTH=window.innerWidth,GAME_HEIGHT=window.innerHeight,SKIER_CRASH="skierCrash",SKIER_LEFT="skierLeft",SKIER_LEFTDOWN="skierLeftDown",SKIER_DOWN="skierDown",SKIER_RIGHTDOWN="skierRightDown",SKIER_RIGHT="skierRight",JUMP_STEP_1="skier_jump_1",JUMP_STEP_2="skier_jump_2",JUMP_STEP_3="skier_jump_3",JUMP_STEP_4="skier_jump_4",JUMP_STEP_5="skier_jump_5",SKIER_DIRECTIONS={CRASH:0,LEFT:1,LEFT_DOWN:2,DOWN:3,RIGHT_DOWN:4,RIGHT:5},SKIER_DIRECTION_ASSET={[SKIER_DIRECTIONS.CRASH]:SKIER_CRASH,[SKIER_DIRECTIONS.LEFT]:SKIER_LEFT,[SKIER_DIRECTIONS.LEFT_DOWN]:SKIER_LEFTDOWN,[SKIER_DIRECTIONS.DOWN]:SKIER_DOWN,[SKIER_DIRECTIONS.RIGHT_DOWN]:SKIER_RIGHTDOWN,[SKIER_DIRECTIONS.RIGHT]:SKIER_RIGHT},SKIER_JUMP_ASSET=[JUMP_STEP_1,JUMP_STEP_2,JUMP_STEP_3,JUMP_STEP_4,JUMP_STEP_5],TREE="tree",TREE_CLUSTER="treeCluster",ROCK1="rock1",ROCK2="rock2",JUMP_RUMP="jump_ramp",DISTANCE_BETWEEN_OBSTACLES=50,STARTING_OBSTACLE_GAP=100,STARTING_OBSTACLE_REDUCER=300,NEW_OBSTACLE_CHANCE=8,RHINO_DEFAULT="rhino_default",RHINO_LIFT="rhino_lift",RHINO_LIFT_EAT_1="rhino_lift_eat_1",RHINO_LIFT_EAT_2="rhino_lift_eat_2",RHINO_LIFT_EAT_3="rhino_lift_eat_3",RHINO_LIFT_EAT_4="rhino_lift_eat_4",RHINO_LIFT_MOUTH_OPEN="rhino_lift_mouth_open",RHINO_RUN_LEFT="rhino_run_left",RHINO_RUN_LEFT_2="rhino_run_left_2",RHINO_MOMENT=5e3,RHINO_STATES={INITIAL:"initial",RUNNING:"running",LIFT:"lift",MOUTH_OPEN:"mouthOpen",EAT:"eat"},RHINO_TIME_APPEAR=20,RHINO_TIME_LIFT=25,RHINO_TIME_MOUTH_OPEN=25,RHINO_TIME_EAT=25,ASSETS_DIR="dist/img",ASSETS={[SKIER_CRASH]:"dist/img/skier_crash.png",[SKIER_LEFT]:"dist/img/skier_left.png",[SKIER_LEFTDOWN]:"dist/img/skier_left_down.png",[SKIER_DOWN]:"dist/img/skier_down.png",[SKIER_RIGHTDOWN]:"dist/img/skier_right_down.png",[SKIER_RIGHT]:"dist/img/skier_right.png",[TREE]:"dist/img/tree_1.png",[TREE_CLUSTER]:"dist/img/tree_cluster.png",[ROCK1]:"dist/img/rock_1.png",[ROCK2]:"dist/img/rock_2.png",[JUMP_RUMP]:"dist/img/jump_ramp.png",[JUMP_STEP_1]:"dist/img/skier_jump_1.png",[JUMP_STEP_2]:"dist/img/skier_jump_2.png",[JUMP_STEP_3]:"dist/img/skier_jump_3.png",[JUMP_STEP_4]:"dist/img/skier_jump_4.png",[JUMP_STEP_5]:"dist/img/skier_jump_5.png",[RHINO_DEFAULT]:"dist/img/rhino_default.png",[RHINO_LIFT]:"dist/img/rhino_lift.png",[RHINO_LIFT_EAT_1]:"dist/img/rhino_lift_eat_1.png",[RHINO_LIFT_EAT_2]:"dist/img/rhino_lift_eat_2.png",[RHINO_LIFT_EAT_3]:"dist/img/rhino_lift_eat_3.png",[RHINO_LIFT_EAT_4]:"dist/img/rhino_lift_eat_4.png",[RHINO_LIFT_MOUTH_OPEN]:"dist/img/rhino_lift_mouth_open.png",[RHINO_RUN_LEFT]:"dist/img/rhino_run_left.png",[RHINO_RUN_LEFT_2]:"dist/img/rhino_run_left_2.png"},KEYS={PAUSE:27,JUMP:32,LEFT:37,RIGHT:39,UP:38,DOWN:40},SKIER_STARTING_SPEED=8,SKIER_DIAGONAL_SPEED_REDUCER=1.4142,SKIER_TIMING_JUMP=5,CREDIT_FOR_JUMP=50,SCORE_ITEM="rinho-score",PATH_ALPHA_MIN="0.25",PATH_ALPHA_MAX="0.50",LOADING_CONTAINER="#loading",GAME_OVER_CONTAINER="#messagegameOver",PAUSE_CONTAINER="#messageOnPause",PANEL_CONTAINER="#panel",WELCOME_CONTAINER="#welcome",CENTER_CONTAINER=".expression",BEST_SCORE_CONTAINER=".best-score",SCORE_CONTAINER=".score",SPEED_CONTAINER=".speed",DISTANCE_CONTAINER="#distance",ERROR_CONTAINER="#error",SHOW_ERROR_CONTAINER="#messageError",PAUSE_OFF_BUTTON="#pauseOff",OK_BUTTON="#ok",RESTART_BUTTON="#restart",CLASS_SHOW="show",CLASS_HIDE="hide",CLASS_ANIMATION_JUMP="jump",CLASS_ANIMATION_GO="go";$(document).ready(()=>{let t=new NotificationManager;t.loading(),Assets.load(ASSETS).then(()=>{t.loaded();let e=new Game(t);t.setEventListener(e),e.init(),e.run()},e=>{t.showError(`Error when trying to load ${e}`)})});let singletonFactory=function(){let t={};return function(e,s){return"object"==typeof t[e]?t[e]:(t[e]=s(),t[e])}}();const Assets=singletonFactory("Assets",()=>{const t={};let e=[];return t.load=(t=>{let s=[];return Object.keys(t).forEach(i=>{let a=new Image,h=i,r=t[i],_=new $.Deferred;a.onload=(()=>{a.width/=2,a.height/=2,e[h]=a,_.resolve()}),a.onerror=(()=>{_.reject(i)}),a.src=r,s.push(_.promise())}),$.when.apply($,s)}),t.getAsset=(t=>e[t]),t});class Canvas{constructor(t,e){this.width=t,this.height=e,this.drawOffset={x:0,y:0},this.createCanvas()}createCanvas(){const t=document.createElement("canvas");t.id="skiCanvas",t.width=this.width*window.devicePixelRatio,t.height=this.height*window.devicePixelRatio,t.style.width=this.width+"px",t.style.height=this.height+"px",this.ctx=t.getContext("2d"),this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio),document.body.appendChild(t)}clearCanvas(){this.ctx.clearRect(0,0,this.width,this.height)}setDrawOffset(t,e){this.drawOffset.x=t,this.drawOffset.y=e}drawImage(t,e,s,i,a){e-=this.drawOffset.x,s-=this.drawOffset.y,this.ctx.drawImage(t,e,s,i,a)}drawRect(t,e=[]){const s=parseInt(e.length/2);let i=0;e.map(e=>{let a=`rgba(${t},${i<s?PATH_ALPHA_MAX:PATH_ALPHA_MIN})`;this.ctx.fillStyle=a,this.ctx.fillRect(e.x,e.y,1,1),i++}),this.ctx.fill()}}class DomManager{constructor(){}addClass(t,e){$(t).hasClass(e)||$(t).addClass(e)}removeClass(t,e){$(t).hasClass(e)&&$(t).removeClass(e)}setContent(t,e){$(t).html(e)}}class Game{constructor(t){this.canvas=new Canvas(GAME_WIDTH,GAME_HEIGHT),this.obstacleManager=new ObstacleManager,this.skier=new Skier(0,0),this.observeSkier(),this.rino=new Rhino,this.player=new Player,this.notificationManager=t,document.addEventListener("keydown",this.handleKeyDown.bind(this))}init(){this.paused=!1,this.speed=SKIER_STARTING_SPEED,this.skier.init(),this.rino.init(),this.player.init(),this.obstacleManager.placeInitialObstacles()}run(){this.canvas.clearCanvas(),this.updateGameWindow(),this.drawGameWindow(),this.updateScore(),this.checkSpeed(),!1===this.paused&&!1===this.gameOver()&&window.requestAnimationFrame(this.run.bind(this)),this.notify()}updateGameWindow(){const t=this.gameWindow;!1===this.rino.catchSkier()&&this.skier.move(this.speed),this.calculateGameWindow(),this.obstacleManager.placeNewObstacle(this.gameWindow,t),this.skier.checkIfSkierHitObstacle(this.obstacleManager),!0===this.skier.isSkying()&&this.rino.run(this.skier)}drawGameWindow(){this.canvas.setDrawOffset(this.gameWindow.left,this.gameWindow.top),!1===this.rino.catchSkier()&&this.skier.drawAndDecore(this.canvas),this.obstacleManager.drawObstacles(this.canvas),this.rino.drawAndDecore(this.canvas)}calculateGameWindow(){const t=this.skier.getPosition(),e=t.x-GAME_WIDTH/2,s=t.y-GAME_HEIGHT/2;this.gameWindow=new Rect(e,s,e+GAME_WIDTH,s+GAME_HEIGHT)}gameOver(){const t=!0===this.skier.crashed||!0===this.rino.eat();return!0===t&&this.player.storeScore(),t}setPause(t=!0){this.player.score>0&&(this.paused=t,!1===this.paused&&this.run())}updateScore(){!1===this.paused&&!0===this.skier.isSkying()&&!1===this.rino.catchSkier()&&this.player.update(this.speed)}checkSpeed(){this.acelerate=this.player.checkAceleration(),!0===this.acelerate&&(this.speed+=1)}handleKeyDown(t){switch(t.which){case KEYS.LEFT:this.skier.turnLeft(),t.preventDefault();break;case KEYS.RIGHT:this.skier.turnRight(),t.preventDefault();break;case KEYS.UP:this.skier.turnUp(),t.preventDefault();break;case KEYS.DOWN:this.skier.turnDown(),t.preventDefault();break;case KEYS.PAUSE:this.setPause(!0),t.preventDefault();break;case KEYS.JUMP:this.skier.jump(),t.preventDefault()}}notify(){this.notificationManager.updateGameState({isPaused:this.paused,isGameOver:this.gameOver(),speed:this.speed,acelerate:this.acelerate,isJumping:this.skier.isJumping(),player:this.player})}observeSkier(){this.skier.observable.add(t=>{t.credit&&this.player.sumCredit(t.credit)})}}class NotificationManager extends DomManager{constructor(){super()}loading(){this.addClass(LOADING_CONTAINER,CLASS_SHOW)}loaded(){this.addClass(LOADING_CONTAINER,CLASS_HIDE),this.addClass(PANEL_CONTAINER,CLASS_SHOW),this.addClass(WELCOME_CONTAINER,CLASS_SHOW)}updateGameState(t){this.checkGameOver(t.isGameOver),this.checkPause(t.isPaused),this.checkJump(t.isJumping),this.showScore(t.player),this.showSpeed(t.acelerate,t.speed);const e=t.player.distance.toString();this.setContent(DISTANCE_CONTAINER,e.substring(0,5))}checkGameOver(t){!0===t&&(this.addClass(GAME_OVER_CONTAINER,CLASS_SHOW),this.removeClass(CENTER_CONTAINER,CLASS_ANIMATION_GO))}checkPause(t){!0===t&&(this.removeClass(PAUSE_CONTAINER,CLASS_HIDE),this.addClass(PAUSE_CONTAINER,CLASS_SHOW))}checkJump(t){!0===t?this.addClass(CENTER_CONTAINER,CLASS_ANIMATION_JUMP):this.removeClass(CENTER_CONTAINER,CLASS_ANIMATION_JUMP)}showScore(t){this.setContent(SCORE_CONTAINER,t.score),this.addClass(BEST_SCORE_CONTAINER,CLASS_HIDE),t.storedScore>0&&(this.setContent(BEST_SCORE_CONTAINER,t.storedScore),this.removeClass(BEST_SCORE_CONTAINER,CLASS_HIDE),this.addClass(BEST_SCORE_CONTAINER,CLASS_SHOW))}showSpeed(t,e){!0===t&&this.addClass(SPEED_CONTAINER,CLASS_ANIMATION_JUMP),this.setContent(SPEED_CONTAINER,e)}showError(t){this.setContent(SHOW_ERROR_CONTAINER,t),this.addClass(ERROR_CONTAINER,CLASS_SHOW)}setEventListener(t){$(PAUSE_OFF_BUTTON).click(()=>{this.removeClass(PAUSE_CONTAINER,CLASS_SHOW),t.setPause(!1)}),$(RESTART_BUTTON).click(()=>{this.removeClass(GAME_OVER_CONTAINER,CLASS_SHOW),this.addClass(CENTER_CONTAINER,CLASS_ANIMATION_GO),t.init(),t.run()}),$(OK_BUTTON).click(()=>{this.removeClass(WELCOME_CONTAINER,CLASS_SHOW),this.addClass(CENTER_CONTAINER,CLASS_ANIMATION_GO)})}}const Store=singletonFactory("Store",()=>{const t={set:(t,e)=>{"string"==typeof e||JSON.stringify(e);window.localStorage.setItem(t,e)},get:(t,e=!1)=>!1===e?window.localStorage.getItem(t):JSON.parse(window.localStorage.getItem(t))};return t}),randomInt=function(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t},intersectTwoRects=function(t,e){return!(e.left>t.right||e.right<t.left||e.top>t.bottom||e.bottom<t.top)};class Rect{constructor(t,e,s,i){this.left=t,this.top=e,this.right=s,this.bottom=i}}class Element{constructor(t,e){this.x=t,this.y=e}getAssetName(){return this.assetName}getPosition(){return{x:this.x,y:this.y}}getBounds(){const t=Assets.getAsset(this.assetName),e=this.getPosition();return new Rect(e.x-t.width/2,e.y-t.height/2,e.x+t.width/2,e.y)}draw(t){const e=Assets.getAsset(this.assetName),s=this.x-e.width/2,i=this.y-e.height/2;t.drawImage(e,s,i,e.width,e.height)}}class Observable{constructor(){this.observers=[]}add(t){this.observers.push(t)}notify(t){this.observers.forEach(function(e){e.call(null,t)})}}const assetTypes=[TREE,TREE_CLUSTER,ROCK1,ROCK2,JUMP_RUMP];class Obstacle extends Element{constructor(t,e){super(t,e);const s=randomInt(0,assetTypes.length-1);this.assetName=assetTypes[s],this.canBeJumped=this.assetName===JUMP_RUMP}}class ObstacleManager{constructor(){this.obstacles=[]}getObstacles(){return this.obstacles}drawObstacles(t){this.obstacles.forEach(e=>{e.draw(t)})}placeInitialObstacles(){this.obstacles.length>0&&(this.obstacles=[]);const t=Math.ceil(GAME_WIDTH/STARTING_OBSTACLE_REDUCER*(GAME_HEIGHT/STARTING_OBSTACLE_REDUCER)),e=0-GAME_WIDTH/2,s=GAME_WIDTH/2,i=STARTING_OBSTACLE_GAP,a=GAME_HEIGHT/2;for(let h=0;h<t;h++)this.placeRandomObstacle(e,s,i,a);this.obstacles.sort((t,e)=>t.getPosition().y-e.getPosition().y)}placeNewObstacle(t,e){randomInt(1,NEW_OBSTACLE_CHANCE)===NEW_OBSTACLE_CHANCE&&e&&(t.left<e.left?this.placeObstacleLeft(t):t.left>e.left&&this.placeObstacleRight(t),t.top<e.top?this.placeObstacleTop(t):t.top>e.top&&this.placeObstacleBottom(t))}placeObstacleLeft(t){this.placeRandomObstacle(t.left,t.left,t.top,t.bottom)}placeObstacleRight(t){this.placeRandomObstacle(t.right,t.right,t.top,t.bottom)}placeObstacleTop(t){this.placeRandomObstacle(t.left,t.right,t.top,t.top)}placeObstacleBottom(t){this.placeRandomObstacle(t.left,t.right,t.bottom,t.bottom)}placeRandomObstacle(t,e,s,i){const a=this.calculateOpenPosition(t,e,s,i),h=new Obstacle(a.x,a.y);this.obstacles.push(h)}calculateOpenPosition(t,e,s,i){const a=randomInt(t,e),h=randomInt(s,i);return this.obstacles.find(t=>a>t.x-DISTANCE_BETWEEN_OBSTACLES&&a<t.x+DISTANCE_BETWEEN_OBSTACLES&&h>t.y-DISTANCE_BETWEEN_OBSTACLES&&h<t.y+DISTANCE_BETWEEN_OBSTACLES)?this.calculateOpenPosition(t,e,s,i):{x:a,y:h}}}class Player{constructor(){}init(){this.score=0,this.time=1,this.distance=0,this.storedScore=parseInt(Store.get(SCORE_ITEM))||0}update(t){const e=t/60/60/100;this.distance+=e,this.time+=.0016,this.score+=parseInt(this.time)}storeScore(){this.score>this.storedScore&&Store.set(SCORE_ITEM,this.score)}sumCredit(t){this.score+=t}checkAceleration(){return this.score>0&&this.score%1e3==0}}class Rhino extends Element{constructor(){super(),this.decorator=new RhinoDecorator}init(){this.decorator.reset(),this.setAsset(),this.appears=!1,this.timming=0}run(t){this.timming<RHINO_MOMENT?this.timming+=1:(!1===this.appears&&this.intro(t),!0===this.isRunning()&&this.move(t),this.decorator.controlStates(),this.setAsset())}setAsset(){this.assetName=this.decorator.getAsset()}intro(t){this.x=t.x+GAME_WIDTH,this.y=t.y-GAME_HEIGHT/2,this.appears=!0}drawAndDecore(t){!0===this.appears&&this.draw(t)}isRunning(){return this.decorator.state.name===RHINO_STATES.RUNNING}catchSkier(){const t=this.decorator.state;return t.name===RHINO_STATES.LIFT||t.name===RHINO_STATES.MOUTH_OPEN||t.name===RHINO_STATES.EAT}eat(){return!0===this.decorator.finish}move(t){const e=1.1*t.speed;switch(t.direction){case SKIER_DIRECTIONS.LEFT_DOWN:this.updatePosition(t,e),this.y+=e/SKIER_DIAGONAL_SPEED_REDUCER;break;case SKIER_DIRECTIONS.DOWN:this.y+=e;break;case SKIER_DIRECTIONS.RIGHT_DOWN:this.updatePosition(t,e),this.y+=e/SKIER_DIAGONAL_SPEED_REDUCER}t.y<this.y&&(this.y=t.y,t.x>this.x?this.x+=e:this.x-=e),!0===intersectTwoRects(t.getBounds(),this.getBounds())&&this.decorator.nextState()}updatePosition(t,e){this.x<t.x?this.x+=e/SKIER_DIAGONAL_SPEED_REDUCER:this.x-=e/SKIER_DIAGONAL_SPEED_REDUCER}}class RhinoDecorator{constructor(){}setStates(){this.states={[RHINO_STATES.INITIAL]:{name:RHINO_STATES.INITIAL,time:RHINO_TIME_APPEAR,asset:RHINO_DEFAULT},[RHINO_STATES.RUNNING]:{name:RHINO_STATES.RUNNING},[RHINO_STATES.LIFT]:{name:RHINO_STATES.LIFT,time:RHINO_TIME_LIFT,asset:RHINO_LIFT},[RHINO_STATES.MOUTH_OPEN]:{name:RHINO_STATES.MOUTH_OPEN,time:RHINO_TIME_MOUTH_OPEN,asset:RHINO_LIFT_MOUTH_OPEN},[RHINO_STATES.EAT]:{name:RHINO_STATES.EAT,time:RHINO_TIME_EAT,assets:[RHINO_LIFT_EAT_1,RHINO_LIFT_EAT_2,RHINO_LIFT_EAT_3,RHINO_LIFT_EAT_4]}}}getAsset(){return this.assetState}controlStates(){this.state.name===RHINO_STATES.INITIAL||this.state.name===RHINO_STATES.LIFT||this.state.name===RHINO_STATES.MOUTH_OPEN?this.iterateState():this.state.name===RHINO_STATES.RUNNING?this.assetState=this.assetState===RHINO_RUN_LEFT?RHINO_RUN_LEFT_2:RHINO_RUN_LEFT:this.eat()}iterateState(){this.timeState<this.state.time?(this.timeState++,this.assetState=this.state.asset):this.nextState()}nextState(){switch(this.timeState=1,this.state.name){case RHINO_STATES.INITIAL:this.state=this.states[RHINO_STATES.RUNNING];break;case RHINO_STATES.RUNNING:this.state=this.states[RHINO_STATES.LIFT];break;case RHINO_STATES.LIFT:this.state=this.states[RHINO_STATES.MOUTH_OPEN];break;case RHINO_STATES.MOUTH_OPEN:this.state=this.states[RHINO_STATES.EAT]}}eat(){const t=this.state.assets,e=this.state.time;this.timeEating<=t.length?this.timeState<e?(this.assetState=t[this.timeEating-1],this.timeState++):(this.timeState=1,this.timeEating++):this.finish=!0}reset(){this.timeState=1,this.timeEating=1,this.finish=!1,this.setStates(),this.state=this.states[RHINO_STATES.INITIAL]}}class Skier extends Element{constructor(t,e){super(t,e),this.decorator=new SkierDecorator,this.observable=new Observable}init(){this.direction=SKIER_DIRECTIONS.RIGHT,this.assetName=SKIER_RIGHT,this.decorator.path=[],this.x=0,this.y=0,this.crashed=!1}setDirection(t){this.direction=t,this.updateAsset(),t===SKIER_DIRECTIONS.CRASH&&(this.crashed=!0)}updateAsset(){this.assetName=SKIER_DIRECTION_ASSET[this.direction]}isSkying(){return this.direction===SKIER_DIRECTIONS.LEFT_DOWN||this.direction===SKIER_DIRECTIONS.DOWN||this.direction===SKIER_DIRECTIONS.RIGHT_DOWN}move(t){switch(this.speed=t,this.direction){case SKIER_DIRECTIONS.LEFT_DOWN:this.moveSkierLeftDown();break;case SKIER_DIRECTIONS.DOWN:this.moveSkierDown();break;case SKIER_DIRECTIONS.RIGHT_DOWN:this.moveSkierRightDown()}}moveSkierLeft(){this.x-=SKIER_STARTING_SPEED}moveSkierLeftDown(){this.x-=this.speed/SKIER_DIAGONAL_SPEED_REDUCER,this.y+=this.speed/SKIER_DIAGONAL_SPEED_REDUCER,this.decorator.updatePath(this.direction)}moveSkierDown(){this.y+=this.speed,!0===this.decorator.isJumping?(this.assetName=this.decorator.getJumpAsset(),this.decorator.controlJump()):(this.updateAsset(),this.decorator.updatePath(this.direction))}moveSkierRightDown(){this.x+=this.speed/SKIER_DIAGONAL_SPEED_REDUCER,this.y+=this.speed/SKIER_DIAGONAL_SPEED_REDUCER,this.decorator.updatePath(this.direction)}moveSkierRight(){this.x+=SKIER_STARTING_SPEED}moveSkierUp(){this.y-=SKIER_STARTING_SPEED}turnLeft(){this.direction===SKIER_DIRECTIONS.LEFT?this.moveSkierLeft():(this.setDirection(this.direction-1),!1===this.decorator.isJumping&&this.decorator.resetPath())}turnRight(){this.direction===SKIER_DIRECTIONS.RIGHT?this.moveSkierRight():(this.setDirection(this.direction+1),!1===this.decorator.isJumping&&this.decorator.resetPath())}turnUp(){this.direction!==SKIER_DIRECTIONS.LEFT&&this.direction!==SKIER_DIRECTIONS.RIGHT||this.moveSkierUp()}turnDown(){this.setDirection(SKIER_DIRECTIONS.DOWN),this.decorator.resetPath()}jump(t=!1){this.direction===SKIER_DIRECTIONS.DOWN&&(this.decorator.jump(this.speed),!0===t&&this.notify({credit:CREDIT_FOR_JUMP*this.speed}))}isJumping(){return!0===this.decorator.isJumping}drawAndDecore(t){this.draw(t),t.drawRect("200,200,200",this.decorator.path)}checkIfSkierHitObstacle(t){Assets.getAsset(this.assetName);const e=this.getBounds();t.getObstacles().find(t=>{const s=t.getBounds();return!0===intersectTwoRects(e,s)&&(!0!==t.canBeJumped||(this.jump(!0),!1))})&&this.setDirection(SKIER_DIRECTIONS.CRASH)}notify(t){this.observable.notify(t)}}class SkierDecorator{constructor(){this.isJumping=!1,this.pathStep=0}jump(t){this.isJumping=!0,this.timeJumping=1,this.path=[],this.jumpSteps=this.setTimingForJump(t)}setTimingForJump(t){return[{from:0,to:t/4},{from:0,to:t/2},{from:0,to:t},{from:0,to:t/2},{from:0,to:t/4}]}getJumpAsset(){return SKIER_JUMP_ASSET[this.timeJumping-1]}controlJump(){if(this.timeJumping>=SKIER_TIMING_JUMP)this.isJumping=!1;else{const t=this.jumpSteps[this.timeJumping-1];t.from>t.to?this.timeJumping++:this.jumpSteps[this.timeJumping-1].from++}}updatePath(t){const e=GAME_WIDTH/2,s=GAME_HEIGHT/2;this.addPath(t,e,s),this.pathStep+=2,this.truncatePath(e+s)}addPath(t,e,s){switch(t){case SKIER_DIRECTIONS.DOWN:this.pathStep<s&&this.path.push({x:e,y:s-this.pathStep-1});break;case SKIER_DIRECTIONS.LEFT_DOWN:this.pathStep<e&&this.path.push({x:e+10+this.pathStep,y:s-this.pathStep-1});break;case SKIER_DIRECTIONS.RIGHT_DOWN:this.pathStep<e&&this.path.push({x:e-this.pathStep-10,y:s-this.pathStep-1})}}truncatePath(t){this.path.length>t&&(this.path=this.path.slice(Math.max(this.path.length-t,1)))}resetPath(){this.pathStep=0,this.path=[]}}